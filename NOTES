Input format:

* Add label to equation block i.e { ... } => label1 { ... }

* Tensor labels: i[1-9][0-9]+ are intermediates. All else are inputs ([txvf][0-9]+), including i0

* Sum() and P() can be removed

* For inputs, irrep is in the suffix

* Contraction labeling: parts
  - File name (t1_, t2_, t3_, ..)
  - At the top-level (indent 0), all contractions are labeled 1_, 2_, ..
  - Within a level (e.g., t2_3), all contractions at the immediate enclosed level are labeled 1_, 2_,..
  - Intermediate tensor name: name of contraction that first defines it (always at the top (_1) of the list of contractions that define it)

* Replace use of intermediate with their unique name/labels

* Array creation: as late as possible
* Array destruction: as early as possible




Clarifications:

* Additions of tensors with different irreps


Assumptions:

- range of h1..hn: O and p1..pn: V

- indices in array reference are always h[1-9]+ or p[1-9]+

- statement label and function name prefixes come from file name.

- In transform_input folder:
python main.py ct1.eq - takes equation in ccsd fortran code comment and generates ctce_input with stmt labels
python main_opmin.py c1.eq - takes the above ctce_input and generates ct1_refs.cc C code


So's Input -> Pai-Wei's opmin input (python SoInput/main.py ct1.eq)
 - Assume array is indexed only with hi and pi with ranges O and V.
 - rename any tensor x to x_type ex: t_oovv
 - TODO: array refs such as t1(h2 h3* hc hv) h3* needs to be deleted in the end.

Pai-Wei's output -> ctce_input  (python main_opmin.py ct1.eq.out x) where x is any number other than zero
 - Remove braces around array decls
 - Collapse the f_... and v_... array delcarations (with range N) and their usage to f and v 

