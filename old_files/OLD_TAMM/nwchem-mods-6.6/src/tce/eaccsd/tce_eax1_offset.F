ckbn Kiran Bhaskaran-Nair modified from tce_x1_offset.F
      SUBROUTINE tce_eax1_old_offset(l_a_offset,k_a_offset,size)
C     $Id: tce_eax1_offset.F 25748 2014-06-08 07:53:05Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     x ( p2 h3 )_x
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
#include "stdio.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p2b
      INTEGER h3b
      length = 0
      DO p2b = noab+1,noab+nvab
c#ifndef EACCSD
c      DO h3b = 1,noab
c      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
c      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_x) TH
c     &EN
c      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1
c     &).ne.4)) THEN
c#else
      DO h3b = 1,1
      IF (int_mb(k_spin+p2b-1) .eq. ea_unused_spin) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ea_unused_sym) .eq. irrep_x) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+ea_unused_spin
     &.ne.4)) THEN
c#endif
      length = length + 1
      END IF
      END IF
      END IF
c#ifndef EACCSD
      END DO
c#endif
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'tce_x1_offset',l_a_offset,
     1k_a_offset)) CALL ERRQUIT('tce_x1_offset',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p2b = noab+1,noab+nvab
c#ifndef EACCSD
c      DO h3b = 1,noab
c      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
c      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_x) TH
c     &EN
c      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1
c     &).ne.4)) THEN
c#else
      DO h3b = 1,1
      IF (int_mb(k_spin+p2b-1) .eq. ea_unused_spin) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ea_unused_sym) .eq. irrep_x) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+ea_unused_spin
     &.ne.4)) THEN
c#endif
      addr = addr + 1
      int_mb(k_a_offset+addr) = h3b - 1 + noab * (p2b - noab - 1)
      int_mb(k_a_offset+length+addr) = size
ckbn      write(LuOut,*) "Leng addr key size ", length,addr,
ckbn     + h3b - 1 + noab * (p2b - noab - 1), size
ckbn      size = size + int_mb(k_range+p2b-1) * int_mb(k_range+h3b-1)
      size = size + int_mb(k_range+p2b-1) * 1
      END IF
      END IF
      END IF
c#ifndef EACCSD
      END DO
c#endif
      END DO
      RETURN
      END

ckbn Kiran Bhaskaran-Nair modified from tce_x1_offset.F
      SUBROUTINE tce_eax1_offset(l_a_offset,k_a_offset,size)
C     $Id: tce_eax1_offset.F 25748 2014-06-08 07:53:05Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     x ( p2 h3 )_x
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
#include "stdio.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p2b
cx      INTEGER h3b
      length = 0
      DO p2b = noab+1,noab+nvab
c#ifndef EACCSD
c      DO h3b = 1,noab
c      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
c      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_x) TH
c     &EN
c      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1
c     &).ne.4)) THEN
c#else
cx      DO h3b = 1,1
      IF (int_mb(k_spin+p2b-1) .eq. ea_unused_spin) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ea_unused_sym) .eq. irrep_x) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+ea_unused_spin
     &.ne.4)) THEN
c#endif
      length = length + 1
      END IF
      END IF
      END IF
c#ifndef EACCSD
cx      END DO
c#endif
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'tce_x1_offset',l_a_offset,
     1k_a_offset)) CALL ERRQUIT('tce_x1_offset',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p2b = noab+1,noab+nvab
c#ifndef EACCSD
c      DO h3b = 1,noab
c      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
c      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_x) TH
c     &EN
c      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1
c     &).ne.4)) THEN
c#else
cx      DO h3b = 1,1
      IF (int_mb(k_spin+p2b-1) .eq. ea_unused_spin) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ea_unused_sym) .eq. irrep_x) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+ea_unused_spin
     &.ne.4)) THEN
c#endif
      addr = addr + 1
cx      int_mb(k_a_offset+addr) = h3b - 1 + noab * (p2b - noab - 1)
      int_mb(k_a_offset+addr) = (p2b - noab - 1)
      int_mb(k_a_offset+length+addr) = size
ckbn      write(LuOut,*) "Leng addr key size ", length,addr,
ckbn     + h3b - 1 + noab * (p2b - noab - 1), size
ckbn      size = size + int_mb(k_range+p2b-1) * int_mb(k_range+h3b-1)
      size = size + int_mb(k_range+p2b-1) * 1
      END IF
      END IF
      END IF
c#ifndef EACCSD
cx      END DO
c#endif
      END DO
      RETURN
      END

      SUBROUTINE tce_eax1_to_new(d_x1, k_x1_offset, d_x1n, k_x1n_offset)
C     $Id: tce_eax1_offset.F 25748 2014-06-08 07:53:05Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     x ( p2 h3 )_x
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
#include "stdio.fh"
      INTEGER d_x1, k_x1_offset
      INTEGER d_x1n, k_x1n_offset
      INTEGER p1b
      INTEGER h2b
      INTEGER l_r1, k_r1
      INTEGER size
      DO p1b = noab+1,noab+nvab
      DO h2b = 1,1
      IF (int_mb(k_spin+p1b-1) .eq. ea_unused_spin) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ea_unused_sym) .eq. irrep_x) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+ea_unused_spin
     &     .ne.4)) THEN         
         size = int_mb(k_range+p1b-1) * 1
         if (.not.ma_push_get(mt_dbl,size,'r1',l_r1,k_r1))
     1        call errquit('tce_eax1_to_new: MA problem',0,MA_ERR)
         call get_hash_block(d_x1,dbl_mb(k_r1),size,
     1        int_mb(k_x1_offset),((p1b-noab-1)*noab+h2b-1))
         call put_hash_block(d_x1n,dbl_mb(k_r1),size,
     1        int_mb(k_x1n_offset),((p1b-noab-1)))
         if (.not.ma_pop_stack(l_r1))
     1        call errquit('tce_eax1_to_new: MA problem',1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END

      SUBROUTINE tce_eax1_from_new(d_x1,k_x1_offset,d_x1n,k_x1n_offset)
C     $Id: tce_eax1_offset.F 25748 2014-06-08 07:53:05Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     x ( p2 h3 )_x
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
#include "stdio.fh"
      INTEGER d_x1, k_x1_offset
      INTEGER d_x1n, k_x1n_offset      
      INTEGER p1b
      INTEGER h2b
      INTEGER l_r1, k_r1
      INTEGER size
      DO p1b = noab+1,noab+nvab
      DO h2b = 1,1
      IF (int_mb(k_spin+p1b-1) .eq. ea_unused_spin) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ea_unused_sym) .eq. irrep_x) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+ea_unused_spin
     &     .ne.4)) THEN         
         size = int_mb(k_range+p1b-1) * 1
         if (.not.ma_push_get(mt_dbl,size,'r1',l_r1,k_r1))
     1        call errquit('tce_eax1_to_new: MA problem',0,MA_ERR)
         call get_hash_block(d_x1n,dbl_mb(k_r1),size,
     1        int_mb(k_x1n_offset),((p1b-noab-1)))
         call put_hash_block(d_x1,dbl_mb(k_r1),size,
     1        int_mb(k_x1_offset),((p1b-noab-1)*noab+h2b-1))
         if (.not.ma_pop_stack(l_r1))
     1        call errquit('tce_eax1_to_new: MA problem',1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END


