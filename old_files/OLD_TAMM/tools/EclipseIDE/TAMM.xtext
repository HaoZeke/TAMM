grammar org.xtext.example.tamm.TAMM with org.eclipse.xtext.common.Terminals

generate tAMM "http://www.xtext.org/example/tamm/TAMM"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


// translation-unit
translation_unit : cel=compound_element_list;

compound_element_list: (ce+=compound_element)* ;

// compound-element
compound_element : id=identifier LBRACE el=element_list RBRACE ;

element_list: (el+=element)* ;        

// element
element : 
         dl=declaration 
         |
         st=statement ;


// declaration
declaration : rd=range_declaration 
              |       
              id=index_declaration 
              |
              sd=scalar_declaration
              |
              ad=array_declaration ;


scalar_declaration: SCALAR id=identifier (COMMA id1+=identifier)* SEMI;

// id-list
id_list_opt : il=id_list?;


id_list : id=identifier (COMMA id1+=identifier)*;
              
num_list : nc=numerical_constant (COMMA nc1+=numerical_constant)*;       


// identifier
identifier : ID ;
    
integer_constant : INT;

// numerical-constant
numerical_constant : INT 
                     |
                     FCONST
                     |
                     FRAC;
    
    
    
// range-declaration
range_declaration : RANGE il=id_list EQUALS ic=integer_constant SEMI ;


// index-declaration
index_declaration : INDEX il=id_list EQUALS id=identifier SEMI ;


// array-declaration
array_declaration : ARRAY asl=array_structure_list (COLON id=identifier)? SEMI ;


array_structure : identifier LBRACKET il1=id_list_opt RBRACKET LBRACKET il2=id_list_opt RBRACKET; //(permut_symmetry)?;

array_structure_list : ars=array_structure (COMMA ars1+=array_structure)* ;



// statement
statement : astmt=assignment_statement ;


// assignment-statement
assignment_statement : (id=identifier COLON)? ar=array_reference ao=assignment_operator exp=expression SEMI ;


// assignment_operator
assignment_operator : EQUALS
                           | TIMESEQUAL
                           | PLUSEQUAL
                           | MINUSEQUAL ;
                           

    
// primary-expression    
unary_expression :   nc=numerical_constant 
                     |
                     ar=array_reference 
                     |
                     LPAREN exp=expression RPAREN ;


// array-reference
array_reference : id=identifier (LBRACKET il=id_list RBRACKET)? ;


// expression                           
plusORminus : PLUS | MINUS ;

// additive-expression
expression : (plusORminus)? me1=multiplicative_expression (plusORminus me+=multiplicative_expression)* ;


// multiplicative-expression
multiplicative_expression : ue=unary_expression (TIMES ue1+=unary_expression)* ;
                            
// TOKENS 
    
// Reserved Keywords
RANGE   :   'range';
INDEX  :   'index';
ARRAY  :   'array';
SCALAR :   'scalar';

// Operators
PLUS    :   '+';
MINUS   :   '-';
TIMES   :   '*';

// Assignment operators
EQUALS   :   '=';
TIMESEQUAL : '*=';
PLUSEQUAL : '+=';
MINUSEQUAL : '-=';

// Delimeters
LPAREN  :   '(';
RPAREN  :   ')';
LBRACE  :   '{';
RBRACE  :   '}';
LBRACKET  :   '[';
RBRACKET  :   ']';
COMMA   :   ',';
COLON   :   ':';
SEMI:  ';';

// Identifier   
terminal ID
    :   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

// Integer Constant
//terminal ICONST //returns ecore::EInt
//    :   '0'..'9'+
//    ;

terminal FRAC
    :   ('1'..'9')+ '/' ('1'..'9')+
    ;

// Foalting Point Constant
terminal FCONST returns ecore::EBigDecimal
    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    |   '.' ('0'..'9')+ EXPONENT?
    |   ('0'..'9')+ EXPONENT
    ;

terminal EXPONENT
    :   ('e'|'E') ('+'|'-')? ('0'..'9')+
    ;
    

terminal ML_COMMENT
    :   '/*' -> '*/'
    ;

//terminal LineComment
//    :   '//'
//    ;

